/*Crea una función que convierta un número de bytes en un formato con valores legibles ('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB')
La función debe tener 2 parámetros:
Primer parámetro debe ser el número de bytes
Segundo parámetro debe ser un número especificando la cantidad de dígitos a los que se debe truncar el resultado (esto se puede hacer con Number.prototype.toPrecision()). 
Por defecto, este parámetro debe de tener un valor de 3.

Ejemplo de uso de la función:

const result = fromBytesToFormattedSizeUnits(1000);
console.log(result); // 1KB


const result = fromBytesToFormattedSizeUnits(123456789);
console.log(result); // 123MB


const result = fromBytesToFormattedSizeUnits(-12145489451.5932, 5);
console.log(result); // -12.145GB*/

function fromBytesToFormattedSizeUnits(bytes, precision = 3){
    if(isNaN(bytes) || !isFinite(bytes)){
        return 'Invalid input';
    }

    const sizeUnits = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    let i=0;
    while(bytes >= 1024 && i<sizeUnits.length - 1){
        bytes /= 1024;
        i++
    }

    return bytes.toPrecision(precision)+sizeUnits[i];
}

//Teniendo en cuenta negativos:
function fromBytesToFormattedSizeUnits2(bytes, precision = 3){
    if(isNaN(bytes) || isFinite(bytes)){
        return 'Invalid input';
    }

    bytes = Math.abs(bytes);

    const sizeUnits2 = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    let j=0;
    while(bytes >= 1024 && j < sizeUnits2.length - 1){
        bytes /= 1024;
        j++;
    }

    return (bytes * (bytes < 0 ? -1 : 1)).toPrecision(precision) + sizeUnits2[j];
}

/*DOCUMENTACIÓN:
-Math.abs: me devuelve el valor absoluto del número 
-isNaN: devuelve un true o un flase, si el valo res un número o no
-isFinite: devuelve un true si es un número fiiito y false si no lo es o no es un número
-toPrecision: formatea el número con la precisión indicada
*/